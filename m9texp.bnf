// Lexical

id           : 'a'-'z' {'a'-'z'}             ;
int64        : '1'-'9' {'0'-'9'}             ;
quotedstring : '"' . '"'                     ;
!whitespace  : ' '                           ;

equals      : '=' '=' ;
notequals   : '!' '=' ;
greaterthan : '>'     ;
lessthan    : '<'     ;

true  : 't' 'r' 'u' 'e'     ;
false : 'f' 'a' 'l' 's' 'e' ;

// Syntax

<<
import(
  "github.com/adammck/m9texp/ast"
	"github.com/adammck/m9texp/gen/token"
)
>>

Expression
  : Expression Operator Operand << ast.MakeExpression($0.(*ast.Expression), $2.(*ast.Operand), $1.(ast.Operator)) >>
  | Operand                     << ast.MakeUnaryExpression($0.(*ast.Operand)) >>
  ;     

Operand:
  : Bool                << ast.MakeOperand($0) >>
  | Variable            << ast.MakeOperand($0) >>
  | Str                 << ast.MakeOperand($0) >>
  | Int                 << ast.MakeOperand($0) >>
  | "(" Expression ")"  << ast.MakeOperand($1) >>
	;

Operator:
  : equals      << &ast.Equals{},      nil >>
  | notequals   << &ast.NotEquals{},   nil >>
  | greaterthan << &ast.GreaterThan{}, nil >>
  | lessthan    << &ast.LessThan{},    nil >>
  ;

Bool:
  : true  << ast.True, nil >>
  | false << ast.False, nil >>
  ;

Variable : id           << ast.MakeVariable($0.(*token.Token)) >> ;
Str      : quotedstring << ast.MakeStr($0.(*token.Token)) >>      ;
Int      : int64        << ast.MakeInt($0.(*token.Token)) >>      ;
