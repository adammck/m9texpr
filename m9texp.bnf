/* Lexical Part */

id : 'a'-'z' {'a'-'z'} ;

int64 : '1'-'9' {'0'-'9'} ;

quotedstring : '"' . '"' ;

operator : '=' '=' | '!' '=' | '<' | '>' ;

!whitespace : ' ' ;

/* Syntax Part */

<<
import(
	"github.com/adammck/m9texp/ast"
	"github.com/adammck/m9texp/token"
)
>>

Expression
  : Expression Operator Operand << ast.MakeBinaryExpression($0.(*ast.Expression), $2.(*ast.Operand), $1.(*ast.Operator)) >>
  | Operand                     << ast.MakeUnaryExpression($0.(*ast.Operand)) >>
  ;     

Operand:
  : Variable            << ast.MakeOperand($0) >>
  | StringLiteral       << ast.MakeOperand($0) >>
  | Int                 << ast.MakeOperand($0) >>
  | "(" Expression ")"  << ast.MakeOperand($1) >>
	;

Variable      : id           << ast.NewVariable(string($0.(*token.Token).Lit)) >> ;
StringLiteral : quotedstring << ast.MakeStringLiteral($0.(*token.Token)) >> ;
Int           : int64        << ast.NewInteger($0.(*token.Token).Lit) >> ;

Operator: operator << ast.NewOperator($0.(*token.Token)) >> ;
